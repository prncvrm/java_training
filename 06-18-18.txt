call by value
eg:

class Point{
	int x, y;
	Point(){}
	Point(int x, int y){
		this.x=x;
		this.y=y;
	}
	void swap(Point p1, Point p2){
		Point temp = pt1;
		p1=p2;
		p2=temp;
	}
}
class Test{
	public static void main(String args[]){
		Point p1,p2;
		p1=new Point();
		p2=new Point();
		swap(p1,p2);
	}
}

call by reference::

@@ this effect can be achieved by using concept of array of objects

class Point{
	int x, y;
	Point(){}
	Point(int x, int y){
		this.x=x;
		this.y=y;
	}
	static void swap(Point []p){
		Point temp = p[0];
		p[0]=p[1];
		p[1]=temp;
	}
	public String toString(){
		return ("x="+x+"y="+y);
	}
}
class Test{
	public static void main(String args[]){
		Point [] p=new Point[2];
		p[0]=new Point(1,4);
		p[1]=new Point(2,3);
		Point.swap(p);
		System.out.println(p[0]);
		System.out.println(p[1]);
	}
}



Exception Handling:::
	@@ Unexpected situtation --->> Exception(Runtime Error)
	@@ Exception Handling is how system react to the exception
	@@ JRE terminates the porgram if Runtime Error comes, and creates the object for the correspoing expcetion class.
	@@ Java has provided > 100 classes for Exception Handling.
	@@ java.lang.Throwable
		|
		|-- Error
		|-- Exception

		Error --> Represents those problems which we can't have the soln for programtically. Eg. - Memory leaks, hdd issues, etc
		Exception --> These are runtime errors

		Exception
			|
			|----- RuntimeException (only unChecked Exception)
			|------ Other Exception(Checked Exception)

		Checked Exception -- Compiler Can Predict
		Unchecked Exception --- Compiler can't predict, the occur suddenly